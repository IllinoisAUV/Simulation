<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Provide the propeller mesh in a separate file with the rotation axis
  over propeller's frame X-axis in DAE (Collada) or STL format.
  -->
  <xacro:property name="prop_mesh_file" value="file://$(find bluerov_uuv)/models/bluerov/mesh/prop.dae"/>

  <!-- Thruster macro with integration of joint and link-->
  <xacro:macro name="thruster_macro" params="robot_namespace thruster_id *origin">

    <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
    <link name="${robot_namespace}/thruster_${thruster_id}">

      <!-- <visual>
        <geometry>
          <mesh filename="${prop_mesh_file}" scale="0.5 0.5 0,5" />
        </geometry>
      </visual> -->

      <inertial>
        <mass value="0.001" />
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="0.000000017" ixy="0.0" ixz="0.0"
               iyy="0.000000017" iyz="0.0"
               izz="0.000000017" />
      </inertial>
    </link>

    <!-- Joint between thruster link and vehicle base link -->
    <joint name="${robot_namespace}/thruster_${thruster_id}_joint" type="continuous">
      <xacro:insert_block name="origin" />
      <axis xyz="1 0 0" />
      <parent link="${robot_namespace}/base_link" />
      <child link="${robot_namespace}/thruster_${thruster_id}" />
    </joint>
    <collision>
        <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
        <geometry>
          <cylinder length="0.000001" radius="0.000001"/>
        </geometry>
        <origin xyz="0 0 0" rpy="0 ${0.5*PI} 0"/>
    </collision>
      <!-- Plugin list -->
    <!-- <gazebo> -->
     <!-- Gazebo plugin listens to the body-->
     <!-- <plugin name="freefloating_gazebo_control" filename="libfreefloating_gazebo_control.so">
         <switchService>switch</switchService>
         <updateRate>100</updateRate>
         <link>base_link</link> -->

         <!-- for each thruster, give the map to XYZ+RPY and the maximum effort -->
         <!-- <thruster>
             <effort>30</effort>
             <name>thr1</name>
             <map>1 0 0 0 0 ${-thr12_y}</map>
         </thruster>
         <thruster>
             <effort>30</effort>
             <name>thr2</name>
             <map>1 0 0 0 0 ${thr12_y}</map>
         </thruster>
         <thruster>
             <effort>30</effort>
             <name>thr3</name>
             <map>0 0 -1 ${-thr34_y} ${thr34_x} 0</map>
         </thruster>
         <thruster>
             <effort>30</effort>
             <name>thr4</name>
             <map>0 0 -1 ${thr34_y} ${thr34_x} 0</map>
         </thruster>
         <thruster>
             <effort>30</effort>
             <name>thr5</name>
             <map>0 0 -1 0 ${-thr5_x} 0</map>
         </thruster>
         <thruster>
             <effort>30</effort>
             <name>thr6</name>
             <map>0 1 0 ${-thr56_z} 0 0</map>
         </thruster>
     </plugin> -->
    <!-- </gazebo>  -->

    <gazebo>
      <!-- Thruster ROS plugin -->
      <plugin name="${robot_namespace}_${thruster_id}_thruster_model" filename="libthruster_ros_plugin.so">
        <!-- Name of the thruster link -->
        <linkName>${robot_namespace}/thruster_${thruster_id}</linkName>

        <!-- Name of the joint between thruster and vehicle base link -->
        <jointName>${robot_namespace}/thruster_${thruster_id}_joint</jointName>

        <!-- Thruster force output topic name -->
        <thrustTopic>${robot_namespace}/thrusters/${thruster_id}/thrust</thrustTopic>

        <!-- Thruster commmand input topic name -->
        <inputTopic>${robot_namespace}/thrusters/${thruster_id}/input</inputTopic>

        <!-- Gain of the input command signal -->
        <gain>1</gain>

        <!-- Maximum allowed input value for the input signal for thruster unit -->
        <clampMax>0</clampMax>

        <!-- Minimum allowed value for the input signal for thruster unit -->
        <clampMin>0</clampMin>

        <!--
        Value from 0 to 1 to set the efficiency of the output thrust force
        Default value is 1.0
        -->
        <thrust_efficiency>1</thrust_efficiency>

        <!--
        Value from 0 to 1 to set the efficiency of the propeller as a factor
        to be multiplied to the current value of the state variable at each
        iteration.
        Default value is 1.0
        -->
        <propeller_efficiency>1</propeller_efficiency>
        <!-- Simple zero-order model -->
        <dynamics>
          <type>ZeroOrder</type>
        </dynamics>

        <dynamics>
          <type>FirstOrder</type>
          <timeConstant>0.05</timeConstant>
        </dynamics>

        <!-- Basic curve
        Input: x
        Output: thrust
        Function: thrust = rotorConstant * x * abs(x)
        -->
        <conversion>
          <type>Basic</type>
          <rotorConstant>0.00031</rotorConstant>
        </conversion>

      </plugin>
    </gazebo>

    <gazebo reference="${robot_namespace}/thruster_${thruster_id}">
      <selfCollide>false</selfCollide>
    </gazebo>
  </xacro:macro>

</robot>
